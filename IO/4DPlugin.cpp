/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : IO
 #	author : miyako
 #	2017/05/22
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#pragma mark Context

std::map<uint32_t, FILE*> fopen_contexts;

uint32_t fopen_context_add(FILE *file)
{
	if(file)
	{
		uint32_t i = 1;
		
		while (fopen_contexts.find(i) != fopen_contexts.end()) i++;
		
		fopen_contexts.insert(std::map<uint32_t, FILE*>::value_type(i, file));
		
		return i;
	}
	return 0;
}

FILE *fopen_context_get(uint32_t i)
{
	FILE *file = NULL;
	
	std::map<uint32_t, FILE*>::iterator pos = fopen_contexts.find(i);
	
	if(pos != fopen_contexts.end()) file = pos->second;
	
	return file;
}

void fopen_context_remove(uint32_t i)
{
	std::map<uint32_t, FILE*>::iterator pos = fopen_contexts.find(i);
	
	if(pos != fopen_contexts.end())
	{
		FILE *file = pos->second;
		fclose(file);
		fopen_contexts.erase(pos);
	}
}

#pragma mark Startup / Exit

bool IsProcessOnExit()
{
	C_TEXT name;
	PA_long32 state, time;
	PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
	CUTF16String procName(name.getUTF16StringPtr());
	CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
	return (!procName.compare(exitProcName));
}

void OnExit()
{
	for(std::map<uint32_t, FILE*>::iterator i = fopen_contexts.begin(); i != fopen_contexts.end(); i++)
	{
		FILE *file = i->second;
		fclose(file);
	}
	fopen_contexts.clear();
}

void OnCloseProcess()
{
	if(IsProcessOnExit())
	{
		OnExit();
	}
}

void OnStartup()
{

}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
		case kServerInitPlugin :
			OnStartup();
			break;
			
		case kCloseProcess :
			OnCloseProcess();
			break;
			// --- Stream I/O

		case 1 :
			fopen(pResult, pParams);
			break;

		case 2 :
			fclose(pResult, pParams);
			break;

		case 3 :
			fwrite(pResult, pParams);
			break;

		case 4 :
			fread(pResult, pParams);
			break;

		case 5 :
			fgetpos(pResult, pParams);
			break;

		case 6 :
			fsetpos(pResult, pParams);
			break;

	}
}

#pragma mark -

// ---------------------------------- Stream I/O ----------------------------------

#if VERSIONWIN
#define fileno _fileno
#endif

void fopen(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

#if VERSIONWIN
	FILE *f = _wfopen(
								(const wchar_t *)Param1.getUTF16StringPtr(),
								(const wchar_t *)Param2.getUTF16StringPtr()
										);
#else
	CUTF8String filename, mode;
	Param1.convertPath();
	Param1.copyUTF8String(&filename);
	Param2.copyUTF8String(&mode);
	FILE *f = fopen(
									(const char *)filename.c_str(),
									(const char *)mode.c_str()
									);
#endif
	
	returnValue.setIntValue(fopen_context_add(f));
	returnValue.setReturn(pResult);
}

void fclose(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	fopen_context_remove(Param1.getIntValue());
}

void fwrite(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_BLOB Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	FILE *f = fopen_context_get(Param1.getIntValue());

	if(f)
	{
		size_t s = fwrite(
									(const void *)Param2.getBytesPtr(),
									sizeof(uint8_t),
									Param2.getBytesLength(),
									f
									);
		fflush(f);
		returnValue.setIntValue(s);
	}
	
	returnValue.setReturn(pResult);
}

#include <sys/stat.h>

void fread(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_BLOB Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param3.fromParamAtIndex(pParams, 3);

	FILE *f = fopen_context_get(Param1.getIntValue());
	
	if(f)
	{
		size_t size = Param3.getIntValue();
		
		if(!size)
		{
			off_t cur = ftell(f);
			off_t end = 0;
			int fd = fileno(f);
			struct stat stat_buf;
			if(!fstat(fd, &stat_buf))
			{
				end = stat_buf.st_size;
				size = end - cur;
			}
		}

		if(size)
		{
			std::vector<uint8_t>buf(size);
			
			size_t s = fread(
											 (void *)&buf[0],
											 sizeof(uint8_t),
											 size,
											 f
											 );
			returnValue.setIntValue(s);
			Param2.setBytes((const uint8_t *)&buf[0], s);
		}
		
	}

	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void fgetpos(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	FILE *f = fopen_context_get(Param1.getIntValue());
	
	if(f)
	{
		fpos_t pos = 0;
		returnValue.setIntValue(fgetpos(f, &pos));
		Param2.setIntValue(pos);
	}

	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void fsetpos(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	FILE *f = fopen_context_get(Param1.getIntValue());
	
	if(f)
	{
		const fpos_t pos = Param2.getIntValue();
		returnValue.setIntValue(fsetpos(f, &pos));
	}

	returnValue.setReturn(pResult);
}

